package com.cufe.deepweb.algorithm;

import com.cufe.deepweb.common.index.IndexClient;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Map;
import java.util.Set;

/**
 * the implementation of all-in algorithm
 * this algorithm use all the terms generated by set-covering algorithm
 */
public class AllInAlgorithm extends SetCoverAlgorithm {
    private final Logger logger = LoggerFactory.getLogger(AllInAlgorithm.class);
    private IndexClient client;
    /**
     * the counter to record the left number of set-covering
     */
    private int allInNum;
    private AllInAlgorithm(Builder builder) {
        super(builder);
        this.client = builder.client;
        this.allInNum = builder.allInNum;
    }

    @Override
    protected boolean isUpdate() {
        //only run one time at the beginning, update the index and confirm to update
        if (getSetCoverSize() == 0) {
            return true;
        }
        return false;
    }
    protected void update() {
        client.updateIndex();
        allInNum--;
        logger.info("left update time is {}", allInNum);
        if (allInNum == 0) {
            logger.info("touch the end of all-in algorithm, exit");
            System.exit(0);
        }
    }

    @Override
    protected Map<String, Set<Integer>> getDocSetMap(String field, double low, double up) {
        return client.getDocSetMap(field, low, up);
    }

    @Override
    protected int getDocSize() {
        return client.getDocSize();
    }
    public static class Builder extends SetCoverAlgorithm.Builder {
        private final Logger logger = LoggerFactory.getLogger(Builder.class);
        private IndexClient client;
        private int allInNum = 0;

        public Builder setIndexClient(IndexClient client) {
            this.client = client;
            return this;
        }
        public Builder setAllInNum(int num) {
            if (num < 0) {
                logger.error("all-in number shouldn't small than 0, exit");
                System.exit(1);
            }
            this.allInNum = num;
            return this;
        }
        public AllInAlgorithm build() {
            return new AllInAlgorithm(this);
        }
    }
}
